1. 오리엔테이션
  1. JavaScript에서 할 수 있는 일은?
    웹 브라우저를 제어할 수 있다

  2. JavaScript를 서버에서 사용할 수 있게 하는 것은?
    Node.js

  3. ~ ('Hello World') 에서 물결표에 들어 갈 말은?
    Web =      Node.js =     SpreadSheet =
    alert, write, msgBox

2. 실행과 실습
  4. Chrome 에서 개발자 도구를 여는 단축키는?
    F12

  5. IDE는?
    Integrated Development Environment, 통합 개발 환경


--------------------------------------------------------------------------------------------------------------


3. 숫자와 문자
  1. alert (1); 이 하는 일은?
    웹 브라우저 경고 창에 1 출력

  2. Math.pow(3,2) 의 값은?
    3^2 == 9

  3. Math.round(10.6)의 값은?
    11

  (Advanced) 4. Math.round(100 * Math.random()); 을 설명!

  5. Console.log('Hello World"); 가 실행 되려면?

  6. Console.log('Hello's World'); 가 실행 되려면?
    Console.log('Hello\'s World');

  7. Console.log("Hello \nWorld"); 의 출력 값은?

  8. "1" + 1 의 값은?

  9. console.log("code".length); 의 값은?


--------------------------------------------------------------------------------------------------------------


4. 변수
  1. var a = 1;
    console.log(a + 1); 의 값은?
  
  2. a = 2;
    console.log(a + 1); 의 값은?

5. 주석
  3. 주석의 두 종류는?
    //, /* */

6. 줄바꿈과 여백
  4. ; (Semicolon)의 역할은?
    마침표, 명령어의 끝
  
  5. tab 키의 역할은?
    들여쓰기


--------------------------------------------------------------------------------------------------------------


7.1 비교 : 연산자
  1. 비교 연산자의 종류는?
    <, >, <=, >=, ==, (!=)

  2. 비교 연산자가 반환하는 값은?
    true, false

7.2 비교 : ==, ===
  3. 1 == 2; 의 값은?
    false

  4. var a = 2, a == 1, a === 1 의 차이점은?
    a에 2를 대입, a는 1과 같은 값인가, a와 1이 데이터의 형식도 같은 값인가

7.3 비교 : === 를 사용하자!
  5. null, undefined 의 차이점은?
    값이 없다, 정의되지 않았다

  6. null === undefined, null == undefined 의 값은?
    false, true

  7. boolean 이 반환하는 값은?
    true, false

7.4 비교 : 부정과 부등호
  8. 1 != 1의 값은?


--------------------------------------------------------------------------------------------------------------


8.1 조건문
  1. if (true) { console.log('Hello World'); } 를 설명!
    조건이 true면 콘솔 창에 Hello World 출력

8.2 else, else if
  2. 조건문이 실행되는 조건을 단계적으로 설명!
    var a = 1
    if (a != 1) {
      console.log("1");
    }
    else if (1 === 2) {
      console.log("2");
    } 
    else {
      console.log("3");
    }
  
8.4 논리 연산자
  3. 조건문이 실행되는 조건을 단계적으로 설명!
    var a = 1;
    var b = 2;
    if (a == 1 && b == 1) {
      console.log("네온");
    }
    else if (a == 2 || b == 3) {
      console.log("아니스");
    }
    else {
      console.log("라피");
    }

8.5 boolean 의 대체재
  4. if ( ) {console.log('승리의 여신: 니케')} 가 실행되게 하려면?
    if (1), if (true)


--------------------------------------------------------------------------------------------------------------


9.1 반복 : 기본문법
  1. 아래 코드의 위험한 점은?
    white (true) {
      console.log('기분좋은 향기가 솔솔 피어난다');
    }

9.2 반복 조건
  2. 1번 문제를 10번 반복 하고 종료 되게 하려면?
    var i = 0;
    while (i < 10) {
      console.log('기분좋은 향기가 솔솔 피어난다<br>');
      i++;
    }

9.3 for문
  3. 2번의 코드를 for 문으로 변경!
    var i = 0;
    for (i = 0; i < 10; i++) {
      document.write("기분좋은 향기가 솔솔 피어난다<br>");
    }

  4. i++, ++i 의 차이점은?
    구문이 실행 될 때 다음 단계에서 i 의 값 증가, 
    구문이 실행 될 때 i 의 값이 증가 된 상태로 실행 

9.4 반복문의 효용
  5. while문을 써서 '승리의 여신: 니케' 가 1 부터 100번 까지 출력되고, 
    번호. '승리의 여신: 니케' 가 되게 하려면?!
      let a = '승리의 여신: 니케';
      for (let i = 1; i <= 100; i++) {
        console.log(i + ' ' + a);
      }

9.5 반복문의 제어
  6. 조건문이 실행되는 조건을 단계적으로 설명!
    for (i = 0; i < 10; i++) {
      console.log(i);
      if (i === 5) {
        break;
      }
    }


--------------------------------------------------------------------------------------------------------------


10.1 함수
  1. 사용 목적은?
      코드의 재활용, 유지보수 용의, 가독성 증가 == 함수의 사용 목적만 알면 함수의 이름만 호출하면 되기 때문
  
  2. 콘솔창에 1 ~ 10 까지 출력하는 함수를 정의하고 실행되게 하는 코드는?
    function numbering() {
      i = 1;
      while (i <= 10) {
        console.log(i);
        i++;
      }
    }
    numbering();

10.2 함수의 효용
  3. 함수가 없다면 일어나는 일은?
    코드가 늘어나고 복잡해진다, 노가다가 심해지거나 불가능하게 된다

10.3 입력
10.4 출력
  5. 2개의 인자를 받아 곱하는 함수를 출력!
    function Rapi(a, b) {
      return a * b;
    }
    console.log(Rapi(2, 2));

10.5 다양한 정의 방법
  6. 함수를 정의하는 다른 방법은?
    Rapi = function (a, b) {
      return a * b;
    }
    console.log(Rapi(2, 2));
    
  (Advanced) 7. 몰라도 되지만 익명함수의 출력방법은?  
    console.log((function (a, b) {
      return a * b;
    })(2, 2));


--------------------------------------------------------------------------------------------------------------


11. 배열
  1. 선언과 실행 방법은?
    var name = ['Rapi', 'Anis', 'Neon'];
    console.log(name[0]);

    function Names() {
      return ['Rapi', 'Anis', 'Neon'];
    }
    Nikke = Names();
    console.log(Nikke[0]);

11.3 배열의 반복문의 조우
  2. 아래 코드의 값은?
    function Names() {
      return ['Rapi', 'Anis', 'Neon'];
    }
    Nikke = Names();
    for (let i = 0; i < Nikke.length; i++) {
      console.log(Nikke[i].toUpperCase());
    }

11.4 데이터의 추가
  (Advanced) 3. 
    var character = ['a', 'b', 'c', 'd']; 에서 
    'i', 'a', 'z', 'c', 'd', 'e', 'f' 가 되게 코드 작성!
      char.unshift('i'); // 맨 앞에 추가
      char.splice(2, 1, 'z') // 중간에 추가 
      char = char.concat('e', 'f'); // 맨 뒤에 추가
      console.log(char);

11.5 데이터 제거
  4. 
    var character = ['c', 'a', 'd', 'b']; 를 2 가지 순서대로 정렬
      console.log(char.sort());
      console.log(char.reverse());


--------------------------------------------------------------------------------------------------------------


12. 객체 : 문법
  1. 선언하는 방법은?
    var grades = { 'Rapi': 10, 'Anis': 9, 'Neon': 8 };
    console.log(grades);

    var Grades = {};
    Grades['Rapi'] = 10;
    Grades['Anis'] = 9;
    Grades['Neon'] = 8;
    console.log(Grades['Rapi']);

    var GRADES = new Object();
    GRADES['Rapi'] = 10;
    GRADES['Anis'] = 9;
    GRADES['Neon'] = 8;
    console.log(GRADES['Rapi']);

12.2 객체와 반복문
  2. 
